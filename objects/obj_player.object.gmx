<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

display_reset(8, true);

vel_x = 0;
vel_y = 0;
velocity = 5;
turning_limit = 30;

max_segments = 30;
trail_distance = 20;

for(var _i = 0; _i &lt; max_segments; _i++)
{
    segment_x[_i] = x;
    segment_y[_i] = y;
    segment_r[_i] = lerp(24, 10, _i/(max_segments-1));
}
segment_r[0] = 30;

trail_x = ds_list_create();
trail_y = ds_list_create();
ds_list_add(trail_x, x-2);
ds_list_add(trail_y, y);
ds_list_add(trail_x, x-1);
ds_list_add(trail_y, y);
ds_list_add(trail_x, x);
ds_list_add(trail_y, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

ds_list_destroy(trail_x);
ds_list_destroy(trail_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step

//If the mouse is in the top-left corner then don't run this event
//This stops the snake initialising weirdly due to GMS1 updating the mouse position after the Step event
if ((mouse_x == 0) &amp;&amp; (mouse_y == 0)) exit;

//Get the new position of the head from the mouse cursor
var _head_x = mouse_x;
var _head_y = mouse_y;

//Limit the turning circle of the snake
var _angle_2_1 = point_direction(trail_x[| 2 ], trail_y[| 2 ], trail_x[| 1 ], trail_y[| 1 ]);
var _angle_1_0 = point_direction(trail_x[| 1 ], trail_y[| 1 ], _head_x, _head_y);
var _diff = angle_difference(_angle_1_0, _angle_2_1);
if (abs(_diff) &gt; 160) _diff = 0;
_diff = clamp(_diff, -turning_limit, turning_limit);
_angle_1_0 = _angle_2_1 + _diff;

_head_x = trail_x[| 0 ] + lengthdir_x(velocity, _angle_1_0);
_head_y = trail_y[| 0 ] + lengthdir_y(velocity, _angle_1_0);

//Update data structures
trail_x[| 0 ]  = _head_x; //The 0th position in the trail is always the current positon of the head
trail_y[| 0 ]  = _head_y;
segment_x[ 0 ] = _head_x; //The 0th segment is always the current position of the head too
segment_y[ 0 ] = _head_y;

//Create new segments if the head is more than a segment radius away from previous trail marker
var _prev_trail_x  = trail_x[| 1 ];
var _prev_trail_y  = trail_y[| 1 ];
var _distance = point_distance(_prev_trail_x, _prev_trail_y, _head_x, _head_y);

var _head_positions = floor(_distance / trail_distance);
if (_head_positions &gt; 0)
{
    // {dx,dy} is the normalised vector (length=1) from the last trail marker to the current head position
    var _dx = _head_x - _prev_trail_x;
    var _dy = _head_y - _prev_trail_y;
    var _inv_d = 1/sqrt(_dx*_dx + _dy*_dy); //Good ol' Pythagoras
    _dx *= _inv_d;
    _dy *= _inv_d;
    
    //Add as many new segments as we need in a straight line from the last trail marker to the head
    for(var _i = 1; _i &lt;= _head_positions; _i++)
    {
        var _dist = _i*trail_distance;
        ds_list_insert(trail_x, 1, _prev_trail_x + _dx*_dist); //Insert at the 1th position so we don't overwrite the head position
        ds_list_insert(trail_y, 1, _prev_trail_y + _dy*_dist);
        _pos_count = ds_list_size(trail_x);
    }
}

//Set up some variables for segment placing...
var _trail_x = _head_x;
var _trail_y = _head_y;
var _prev_trail_x = _head_x;
var _prev_trail_y = _head_y;

var _prev_segment_x = _head_x;
var _prev_segment_y = _head_y;
var _prev_segment_r = segment_r[0];
var _segment = 1;
var _segment_r = segment_r[_segment];

//Place segments along the trail
var _trail_count = ds_list_size(trail_x);
for(var _i = 1; _i &lt; _trail_count; _i++) //Iterate over each trail marker...
{
    //Find the current trail market position, but keep track of the previous one too
    _prev_trail_x = _trail_x;
    _prev_trail_y = _trail_y;
    _trail_x = trail_x[| _i ];
    _trail_y = trail_y[| _i ];
    
    //If this trail marker is too close to the last segment, ignore it
    var _min_dist = _segment_r + _prev_segment_r;
    var _dist = point_distance(_prev_segment_x, _prev_segment_y, _trail_x, _trail_y);
    if (_dist &lt; _min_dist) continue;
    
    //Iterate over the line from the previous trail marker to the current trail marker in little hops...
    var _incr = 1/_min_dist;
    for(var _t = 0; _t &lt;= 1; _t += _incr)
    {
        var _x = lerp(_prev_trail_x, _trail_x, _t);
        var _y = lerp(_prev_trail_y, _trail_y, _t);
        
        //If this position is juuuust far enough away from the previous segment then break out of this loop early
        if (point_distance(_prev_segment_x, _prev_segment_y, _x, _y) &gt;= _min_dist)
        {
            break;
        }
    }
    
    //Update the segment position
    segment_x[_segment] = _x;
    segment_y[_segment] = _y;
    
    //Keep track of this segment's position for use in the next iteration
    _prev_segment_x = _x;
    _prev_segment_y = _y;
    _prev_segment_r = _segment_r;
    
    _segment++;
    if (_segment &gt;= max_segments) break; //If we've reached the last segment, break out of this loop
    _segment_r = segment_r[_segment];
}

//Trim off any trail data we didn't use
var _last_i = _i+1;
for(_i = _trail_count-1; _i &gt; _last_i; _i--)
{
    ds_list_delete(trail_x, _i);
    ds_list_delete(trail_y, _i);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

//Draw the segments backwards so the head drawn last, and on top
draw_set_colour(c_orange);
for(var _i = max_segments-1; _i &gt;= 0; _i--)
{
    var _x = segment_x[_i];
    var _y = segment_y[_i];
    var _r = segment_r[_i];
    
    for(var _s = 2; _s &lt;= 5; _s++)
    {
        draw_circle(_x, _y, _r-_s, true);
    }
}

//Draw the trail, debug only
//draw_set_colour(c_white);
//var _trail_count = ds_list_size(trail_x);
//for(var _i = 0; _i &lt; _trail_count; _i++)
//{
//    var _x = trail_x[| _i ];
//    var _y = trail_y[| _i ];
//    draw_circle(_x, _y, 2, false);
//}

draw_set_colour(c_orange);
draw_text(10, 10, "Freeform snake#@jujuadams 2019/05/01");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
